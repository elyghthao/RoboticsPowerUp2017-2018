// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3588.PowerUp.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc3588.PowerUp.Robot;
import org.usfirst.frc3588.PowerUp.RobotMap;

/**
 *
 */
public class Pivot extends Command {
	
    private double m_gyro;
    private double m_power;//power should never be called negative
    private double gyroReading;
//    private double desiredAngle;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public Pivot(double gyro, double power) {


    	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    	
//    	desiredAngle = gyro;
    	//if -90 is passed as paramter for gyro, flipping ito to +90 won't give you the right angle. 
    	//You want 270 in that scenario, so if the gyro parameter is < 0 or > 180, then turn left, else turn right
         m_gyro = gyro; //accounts for robot moving backwards in autonomous
         m_power = RobotMap.TURN_SPEED;
         

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.chassis);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    	RobotMap.chassisleftMotor.set(RobotMap.STOP);
    	RobotMap.chassisrightMotor.set(RobotMap.STOP);
    	RobotMap.chassisGyro.reset();
    	gyroReading = 0.0;
    	if (m_gyro < 0) {
    		m_power *= -1;
    	}
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
    	RobotMap.chassisrightMotor.set(-1 * m_power); //m_power is set to RobotMap.TURN_SPEED. Change constant to change speed for testing
		RobotMap.chassisleftMotor.set(m_power);
		System.out.println("Power set for motors");
		
		
    	gyroReading = RobotMap.chassisGyro.getAngle();
    	System.out.println( "gyro reading from pivot:" + gyroReading);
    	
    	
    	
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
    	System.out.println("In isFinished");
//    	if (m_gyro > 0 && gyroReading >= m_gyro) {
//    		return true;
//    	}
        return (Math.abs(gyroReading) >= Math.abs(m_gyro));
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    	System.out.println("In end()");
    	RobotMap.chassisleftMotor.set(RobotMap.STOP);
    	RobotMap.chassisrightMotor.set(RobotMap.STOP);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
}
