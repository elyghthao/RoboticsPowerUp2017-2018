// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3588.PowerUp.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc3588.PowerUp.Robot;
import org.usfirst.frc3588.PowerUp.RobotMap;

/**
 *
 */
public class Pivot extends Command {

	private boolean m_direction;
    private double m_gyro;
    private double m_power;
    private double gyroReading;
    private final double RIGHT = 1.0;
    private final double LEFT = -1.0;
    private final double GYRO_RANGE = 3.0; // may need to change based on gyro speed
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public Pivot(boolean direction, double gyro, double power) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    	 m_direction = direction;
         m_gyro = gyro;
         m_power = power;
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.chassis);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    	RobotMap.chassisleftMotor.set(RobotMap.STOP);
    	RobotMap.chassisrightMotor.set(RobotMap.STOP);
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
//    	if (m_direction == true) {
//    		RobotMap.chassisrightMotor.set(m_power);
//    		RobotMap.chassisleftMotor.set(-m_power);
//    	}
//    	else  {
//    		RobotMap.chassisrightMotor.set(-m_power);
//    		RobotMap.chassisleftMotor.set(m_power);
//    	}
//    	gyroReading = RobotMap.chassisanalogGyro.getAngle();
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
    	if ((gyroReading > m_gyro - GYRO_RANGE) && (gyroReading < m_gyro + GYRO_RANGE)) {
    		return true;
    	}else {
        return false;
    	}
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    	RobotMap.chassisleftMotor.set(RobotMap.STOP);
    	RobotMap.chassisrightMotor.set(RobotMap.STOP);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
}
