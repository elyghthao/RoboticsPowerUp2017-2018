// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3588.PowerUp.commands;

import edu.wpi.first.wpilibj.command.CommandGroup;
import org.usfirst.frc3588.PowerUp.subsystems.*;

/**
 *
 */
public class scalePosition extends CommandGroup {


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
    public scalePosition(String robotPosition, String scalePosition) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
        	if ((robotPosition.charAt(0) != scalePosition.charAt(1)) && robotPosition.charAt(0)!= 'M') {
        		
        		addSequential (new DriveStraight(0.7, 5.0, 16.0));
        		if (robotPosition.charAt(0) == 'R' ) {
        			addSequential (new Pivot(-90.0, 0.7)); //turn left 
        			
        		} else {
        			addSequential(new Pivot(90.0, 0.7)); //turn right
        		}
        		addSequential(new DriveStraight(0.7, 3.0, 4.0)); 
        		
        		
        		if (robotPosition.charAt(0) == 'L' ) {
        			addSequential (new Pivot(90.0, 0.7)); //turn right 
        			
        		} else {
        			addSequential(new Pivot(-90.0, 0.7)); //turn left
        		}
        		addSequential(new DriveStraight(0.7, 3.0, 4.0));
        		
        		if (robotPosition.charAt(0) == 'L' ) {
        			addSequential (new Pivot(90.0, 0.7)); //turn right 
        			
        		} else {
        			addSequential(new Pivot(-90.0, 0.7)); //turn left
        		}
        	}
        	
        	if (robotPosition.charAt(0) == scalePosition.charAt(1)) {//position aligned with scale
        		addSequential (new DriveStraight(.5, .5, 1));//power time distance
        		if (robotPosition.charAt(0) == 'L' ) {
        			addSequential (new Pivot(5, .3));
        			} else {
        				addSequential (new Pivot (-5, .3));
        			}	
        	}
        	
        	//addSequential (new moveElevator(4));
        	addSequential (new moveElevatorAuto(0.5,500));//power encoderDistance
    		addSequential (new DriveStraight (.5, .5, 1));
    		addSequential (new shootAuto(0.5));
    		addSequential (new DriveStraight (-.5, .5, 1));
    		//addSequential (new moveElevator(6));
    		addSequential (new moveElevatorAuto(-0.5,-500));//power encoderDistance
        // Add Commands here:
        // e.g. addSequential(new Command1());
        //      addSequential(new Command2());
        // these will run in order.

        // To run multiple commands at the same time,
        // use addParallel()
        // e.g. addParallel(new Command1());
        //      addSequential(new Command2());
        // Command1 and Command2 will run in parallel.

        // A command group will require all of the subsystems that each member
        // would require.
        // e.g. if Command1 requires chassis, and Command2 requires arm,
        // a CommandGroup containing them would require both the chassis and the
        // arm.
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS
 
    } 
}

